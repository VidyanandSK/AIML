Q7. A ) Write a C/C++ program to implement the data link layer framing 
methods. A) bit stuffing B) Character stuffing.

SOLUTION:

#include<stdio.h>
#include<conio.h>
#include<string.h>
int main()
{
int a[20],b[30],i,j,k,count,n;
printf("enter frame length:");
scanf("%d",&n);
printf("enter input frame(0's&1's only):");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
i=0;count=1;j=0; 
while(i<n)
{
 if(a[i]==1)
{
 b[j]=a[i];
 for(k=i+1;a[k]==1&&k<n&&count<5;k++)
{
 j++; b[j]=a[k]; 
 count++;
 if(count==5)
{
 j++;
 b[j]=0;
}
i=k;
}
} 
else {
 b[j]=a[i];
}
i++;
j++;
}
printf("After stuffing the frame is:");
for(i=0;i<j;i++)
printf("%d",b[i]);
getch();
return 0;
}

OUTPUT:

enter frame length:10
enter input frame(0's&1's only):1
0
1
0
1
1
1
1
1
1
After stuffing the frame is:10101111101





Q7.B) Write a C/C++ program to implement the data link 
layer framing methods. B) Character stuffing

SOLUTION:

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>
int main()
{ 
int i=0,j=0,n,pos; char a[20],b[50],ch;
printf("enter string:\n");
scanf("%s",&a); 
n=strlen(a);
printf("enter position\n"); 
scanf("%d",&pos);
if(pos>n)
{ 
printf("invalid position,Enter again:");
scanf("%d",&pos);
}
printf("enter the character\n");
ch=getche();
b[0]='d';
b[1]='l';
b[2]='e'; 
b[3]='s'; 
b[4]='t'; 
b[5]='x';
j=6;
while(i<n)
{
if(i==pos-1) 
{
b[j]='d'; 
b[j+1]='l';
b[j+2]='e';
b[j+3]=ch;
b[j+4]='d';
b[j+5]='l';
b[j+6]='e';
j=j+7; 
}
if(a[i]=='d'&&a[i+1]=='l'&& a[i+2]=='e')
{
b[j]='d';
b[j+1]='l';
b[j+2]='e';
j=j+3; 
} 
b[j]=a[i];
i++;
j++; 
}
b[j]='d';
b[j+1]='l';
b[j+2]='e';
b[j+3]='e';
b[j+4]='t';
b[j+5]='x';
b[j+6]='\0';
printf("\n frame after stuffing: \n");
printf("%s",b);
getch();
return 0;
}

0UTPUT:

enter string:
haiarchana
enter position
4
enter the character
k
frame after stuffing:
dlestxhaidlekdlearchanadleetx

Q8: Write a C/C++program to implement Distance Vector Routing algorithm.

SOLUTION: 

#include<stdio.h>
#include<conio.h>

struct node
{
 unsigned dist[20];
 unsigned from[20];
}rt[10];
int main()
{
 int costmat[20][20];
 int nodes,i,j,k,count=0;
 printf("\nEnter the number of nodes : ");
 scanf("%d",&nodes);//Enter the nodes
 printf("\nEnter the cost matrix :\n");
 for(i=0;i<nodes;i++)
 {
 for(j=0;j<nodes;j++)
 {
 scanf("%d",&costmat[i][j]);
 costmat[i][i]=0;
 rt[i].dist[j]=costmat[i][j];//initialise 
//the distance equal to cost matrix
 rt[i].from[j]=j;
 }
 }
 do
 {
 count=0;
 for(i=0;i<nodes;i++)//We choose arbitary vertex k 
//and we calculate the direct distance from the node i to k 
//using the cost matrix
 //and add the distance from k to node j
 for(j=0;j<nodes;j++)
 for(k=0;k<nodes;k++)
 if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j])
 {//We calculate the minimum distance
 rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
rt[i].from[j]=k;
count++;
 }
 }while(count!=0);
 for(i=0;i<nodes;i++)
 {
 printf("\n\n For router %d\n",i+1);
 for(j=0;j<nodes;j++)
 {
 printf("\t\nnode %d via %d Distance %d",j+1,rt[i].from[j]+1,rt[i].dist[j]);
 }
 }
 printf("\n\n");
 getch();
}

OUTPUT:


Enter the number of nodes : 9

Enter the cost matrix :
0 2 7
2 0 1
7 1 0








U


 For router 1

node 1 via 1 Distance 0
node 2 via 5 Distance 0
node 3 via 3 Distance 7
node 4 via 5 Distance 0
node 5 via 5 Distance 0
node 6 via 5 Distance 0
node 7 via 4 Distance 0
node 8 via 5 Distance 0
node 9 via 9 Distance 0

 For router 2

node 1 via 4 Distance 0
node 2 via 2 Distance 0
node 3 via 4 Distance 7
node 4 via 4 Distance 0
node 5 via 4 Distance 0
node 6 via 6 Distance 0
node 7 via 4 Distance 0
node 8 via 8 Distance 0
node 9 via 1 Distance 0

 For router 3

node 1 via 2 Distance 0
node 2 via 2 Distance 0
node 3 via 3 Distance 0
node 4 via 4 Distance 0
node 5 via 2 Distance 0
node 6 via 6 Distance 0
node 7 via 2 Distance 0
node 8 via 8 Distance 0
node 9 via 9 Distance 0

 For router 4

node 1 via 1 Distance 0
node 2 via 2 Distance 0
node 3 via 1 Distance 7
node 4 via 4 Distance 0
node 5 via 5 Distance 0
node 6 via 1 Distance 0
node 7 via 7 Distance 0
node 8 via 8 Distance 0
node 9 via 1 Distance 0

 For router 5

node 1 via 1 Distance 0
node 2 via 2 Distance 0
node 3 via 1 Distance 7
node 4 via 4 Distance 0
node 5 via 5 Distance 0
node 6 via 6 Distance 0
node 7 via 1 Distance 0
node 8 via 8 Distance 0
node 9 via 9 Distance 0

 For router 6

node 1 via 2 Distance 0
node 2 via 2 Distance 0
node 3 via 4 Distance 7
node 4 via 4 Distance 0
node 5 via 1 Distance 0
node 6 via 6 Distance 0
node 7 via 2 Distance 0
node 8 via 8 Distance 0
node 9 via 2 Distance 0

 For router 7

node 1 via 2 Distance 0
node 2 via 2 Distance 0
node 3 via 4 Distance 7
node 4 via 4 Distance 0
node 5 via 1 Distance 0
node 6 via 6 Distance 0
node 7 via 7 Distance 0
node 8 via 8 Distance 0
node 9 via 9 Distance 0

 For router 8

node 1 via 1 Distance 0
node 2 via 1 Distance 0
node 3 via 1 Distance 7
node 4 via 4 Distance 0
node 5 via 1 Distance 0
node 6 via 6 Distance 0
node 7 via 1 Distance 0
node 8 via 8 Distance 0
node 9 via 1 Distance 0

 For router 9

node 1 via 2 Distance 0
node 2 via 2 Distance 0
node 3 via 1 Distance 7
node 4 via 1 Distance 0
node 5 via 1 Distance 0
node 6 via 6 Distance 0
node 7 via 1 Distance 0
node 8 via 8 Distance 0
node 9 via 9 Distance 0

9cpp)Write a C/C++ Program To Implement Stop and Wait Flow Control Protocol.

SOLUTION :

#include<iostream>
#include <time.h>
#include <cstdlib>
#include<ctime>
#include <unistd.h>
using namespace std;
class timer {
 private:
 unsigned long begTime;
 public:
 void start() {
 begTime = clock();
 }
unsigned long elapsedTime() {
 return ((unsigned long) clock() - begTime) / CLOCKS_PER_SEC;
 }
 bool isTimeout(unsigned long seconds) {
 return seconds >= elapsedTime();
 }
};
int main()
{
int frames[] = {1,2,3,4,5,6,7,8,9,10};
unsigned long seconds = 5;
srand(time(NULL));
timer t;
cout<<"Sender has to send frames : ";
for(int i=0;i<10;i++)
 cout<<frames[i]<<" ";
cout<<endl;
int count = 0;
bool delay = false;
cout<<endl<<"Sender\t\t\t\t\tReceiver"<<endl;
do
{
 bool timeout = false;
 cout<<"Sending Frame : "<<frames[count];
 cout.flush();
 cout<<"\t\t";
 t.start();
 if(rand()%2)
 {
 int to = 24600 + rand()%(64000 - 24600) + 1;
 for(int i=0;i<64000;i++)
 for(int j=0;j<to;j++) {}
 }
 if(t.elapsedTime() <= seconds)
 {
 cout<<"Received Frame : "<<frames[count]<<" ";
 if(delay)
 {
 cout<<"Duplicate";
 delay = false;
 }
 cout<<endl;
 count++;
 }
 else
 {
 cout<<"---"<<endl;
 cout<<"Timeout"<<endl;
 timeout = true;
 }
 t.start();
 if(rand()%2 || !timeout)
 {
 int to = 24600 + rand()%(64000 - 24600) + 1;
 for(int i=0;i<64000;i++)
 for(int j=0;j<to;j++) {}
 if(t.elapsedTime() > seconds )
 {
 cout<<"Delayed Ack"<<endl;
 count--;
 delay = true;
 }
 else if(!timeout)
 cout<<"Acknowledgement : "<<frames[count]-1<<endl;
 }
}while(count!=10);
return 0;
}

OUTPUT:


10. Write a C/++ Program for ERROR detecting code using CRC-CCITT (16bit).

SOLUTION:

#include<stdio.h>
#include<conio.h>
 
int main(void)
{ 
int data[50],div[16],rem[16];
int datalen, divlen, i,j,k;
int ch;
printf("Enter the data: ");
i = 0;
while((ch = fgetc(stdin)) != '\n')
{
if(ch == '1')
data[i] = 1;
else 
data[i] = 0;
i++; 
} 
datalen = i; 
printf("\nEnter the divisor: ");
i = 0; 
while((ch = fgetc(stdin)) != '\n')
{
if(ch == '1')
div[i] = 1;
else
div[i] = 0;
i++;
}
divlen = i; 
for(i = datalen ; i < datalen + divlen - 1 ; i++)
data[i] = 0; 
datalen = datalen + divlen - 1; 
for(i = 0 ; i < divlen ; i++)
rem[i] = data[i]; k = divlen-1; 
while(k < datalen)
if(rem[0] == 1)
{
for(i = 0 ; i < divlen ; i++) 
rem[i] = rem[i] ^ div[i];
}
else
{
if(k == datalen-1)
break;
for(i = 0 ; i < divlen-1 ; i++) 
{
rem[i] = rem[i+1];
printf("%d",rem[i]);
} 
rem[i] = data[++k];
printf("%d\n",rem[i]);
}
j=1;
for(i = datalen - divlen + 1 ; i < datalen ; i++) 
{
data[i] = rem[j++];
}
printf("\nThe data to be sent is\n");
for(i = 0 ; i < datalen ; i++)
printf("%d",data[i]);
getch();
return 0;
}

OUTPUT:

Enter the data: 101011111

Enter the divisor: 1011
0011
0111
1111
1001
0101
1010
0010
0100

The data to be sent is
101011111100

Q11cpp) Write a C/C++ Program for Congestion control using Leaky Bucket Algorithm.

SOLUTION : 

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#define NOF_PACKETS 10
int rand(int a)
{
 int rn = (rand() % 10) % a;
 return rn == 0 ? 1 : rn;
}
int main()
{
 int packet_sz[NOF_PACKETS], i, clk, b_size, o_rate, p_sz_rm=0, p_sz, p_time, op;
 for(i = 0; i<NOF_PACKETS; ++i)
 packet_sz[i] = rand(6) * 10;
 for(i = 0; i<NOF_PACKETS; ++i)
 printf("\npacket[%d]:%d bytes\t", i, packet_sz[i]);
 printf("\nEnter the Output rate:");
 scanf("%d", &o_rate);
 printf("Enter the Bucket Size:");
 scanf("%d", &b_size);
 for(i = 0; i<NOF_PACKETS; ++i)
 {
 if( (packet_sz[i] + p_sz_rm) > b_size)
 if(packet_sz[i] > b_size)/*compare the packet siz with bucket size*/
 printf("\n\nIncoming packet size (%dbytes) is Greater than bucket capacity (%dbytes)-PACKET REJECTED", packet_sz[i], b_size);
 else
 printf("\n\nBucket capacity exceeded-PACKETS REJECTED!!");
 else
 {
 p_sz_rm += packet_sz[i];
 printf("\n\nIncoming Packet size: %d", packet_sz[i]);
 printf("\nBytes remaining to Transmit: %d", p_sz_rm);
 p_time = rand(4) * 10;
 printf("\nTime left for transmission: %d units", p_time);
 for(clk = 10; clk <= p_time; clk += 10)
 {
 sleep(1);
 if(p_sz_rm)
 {
 if(p_sz_rm <= o_rate)/*packet size remaining comparing with output rate*/
 op = p_sz_rm, p_sz_rm = 0;
 else
 op = o_rate, p_sz_rm -= o_rate;
 printf("\nPacket of size %d Transmitted", op);
 printf("----Bytes Remaining to Transmit: %d", p_sz_rm);
 }
 else
 {
 printf("\nTime left for transmission: %d units", p_time-clk);
 printf("\nNo packets to transmit!!");
 }
 }
 }
 }
}

OUTPUT:


packet[0]:10 bytes
packet[1]:10 bytes
packet[2]:40 bytes
packet[3]:10 bytes
packet[4]:30 bytes
packet[5]:40 bytes
packet[6]:20 bytes
packet[7]:20 bytes
packet[8]:20 bytes
packet[9]:40 bytes
Enter the Output rate:10
Enter the Bucket Size:1111


Incoming Packet size: 10
Bytes remaining to Transmit: 10
Time left for transmission: 10 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 0

Incoming Packet size: 10
Bytes remaining to Transmit: 10
Time left for transmission: 10 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 0

Incoming Packet size: 40
Bytes remaining to Transmit: 40
Time left for transmission: 10 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 30

Incoming Packet size: 10
Bytes remaining to Transmit: 40
Time left for transmission: 30 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 30
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 20
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 10

Incoming Packet size: 30
Bytes remaining to Transmit: 40
Time left for transmission: 10 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 30

Incoming Packet size: 40
Bytes remaining to Transmit: 70
Time left for transmission: 10 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 60

Incoming Packet size: 20
Bytes remaining to Transmit: 80
Time left for transmission: 10 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 70

Incoming Packet size: 20
Bytes remaining to Transmit: 90
Time left for transmission: 20 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 80
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 70

Incoming Packet size: 20
Bytes remaining to Transmit: 90
Time left for transmission: 30 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 80
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 70
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 60

Incoming Packet size: 40
Bytes remaining to Transmit: 100
Time left for transmission: 20 units
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 90
Packet of size 10 Transmitted----Bytes Remaining to Transmit: 80


